// Code generated by go-bindata.
// sources:
// install/command/assert.go
// install/command/command.go
// install/command/containerd.go
// install/command/containerd.json
// install/command/docker.go
// install/command/docker.json
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installCommandAssertGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func installCommandAssertGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandAssertGo,
		"install/command/assert.go",
	)
}

func installCommandAssertGo() (*asset, error) {
	bytes, err := installCommandAssertGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/assert.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1607003145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandCommandGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x6e\xdb\x46\x10\x3e\x73\x9f\x62\x4a\xc0\x06\x59\xc8\xe4\xa9\x17\x01\x3a\x24\x8a\xf3\x03\x04\xa9\x60\xd9\xe9\x21\x08\x8a\x15\x39\xa4\x16\x5e\xee\xd2\xb3\xbb\x76\x54\xc3\xef\xd0\x27\xe8\xa5\x87\xa2\x6f\x50\xe4\x79\x8a\xb6\x8f\x51\xcc\x92\xa2\x65\x35\xe8\x25\x3a\x08\xdc\xd9\x6f\xbe\x99\xf9\x66\x38\xec\x65\x75\x2d\x5b\x84\xca\x76\x9d\x34\xb5\x10\xaa\xeb\x2d\x79\xc8\x44\x92\x6e\x76\x1e\x5d\x2a\x92\xb4\xa2\x5d\xef\x6d\xe9\x75\x3c\x35\x9d\x4f\x45\xe2\x50\x6a\xeb\x20\x6d\x95\xdf\x86\x4d\x51\xd9\xae\x6c\xa4\x09\x9f\xca\xe1\xa2\x54\xc6\x79\xa9\x35\x3b\x1c\x40\xee\xac\xa9\x91\xd4\xad\x34\xa5\xb6\x6d\x8b\xc4\xf7\xca\x0e\xff\xa5\xb2\xc1\xab\xe8\x62\xd0\x97\x5b\xef\xfb\xfd\x73\xa0\x68\x76\x9e\x94\x69\x63\x16\x5e\x75\x98\x8a\x5c\x88\x5b\x49\x9c\xed\x05\xb6\xca\x79\xda\x3d\x23\x82\x0f\x1f\x07\xa0\x48\xde\xaa\x0d\xec\x7f\x7b\xdb\xea\xba\xbd\x22\xfd\xc4\x96\x0b\xe1\x77\x3d\x82\xf3\xd8\xbf\x31\x1e\xa9\x91\x15\x82\x9a\x9e\xee\x45\xb2\x46\x53\xaf\x06\xb1\xb2\xad\x75\x7e\x74\xcd\x45\x72\x29\xe9\xc8\xb2\xb4\xa6\x51\xed\x91\xf1\xdc\xc8\x8d\x3e\xf6\x7d\x8f\xe4\x94\x35\x47\xd6\x2b\x33\xaa\x77\x64\x5f\x91\x32\x3e\xcb\x45\xf2\x12\x7d\xb5\xe5\x87\xb2\x14\x89\x56\x9b\x2c\x9f\xaa\x73\x48\xb7\xaa\xc2\x97\x4a\x63\x96\xc3\x87\x8f\xdc\x44\x91\x54\x31\xa3\xa7\xc6\x07\x21\x9a\x60\x2a\x70\x47\x95\xcd\x20\x90\x9e\x41\xa3\x34\xbe\x93\x1d\xee\xc3\xb3\x08\x65\x69\x8d\xde\x01\x77\x46\x24\xca\xbd\xf6\xbe\x87\xf9\x62\x44\xb8\xe2\xb5\x74\x2b\xc2\x46\x7d\xca\x22\x43\x1a\x3b\x98\x8b\xa4\xb6\x77\x46\x5b\x59\x2f\xbb\x9a\xe1\x69\x2a\x12\xd5\xc0\xe8\x7f\x2f\x92\x09\xb0\x92\x24\xbb\x3d\x84\x31\xff\xc7\xec\xd2\x98\xd3\xb1\xf7\x02\xd2\xb3\x33\x63\xcf\xaa\x2d\x56\xd7\x67\x15\x92\x57\x8d\xaa\xa4\x47\xa6\x7c\x38\x08\xc6\xd9\x2c\xa0\xe9\x7c\xb1\xee\x59\xd8\x26\x4b\xe1\xae\x45\x0f\x27\x0e\xce\xbe\x87\x13\x97\xce\xe0\x09\xf5\xa3\x26\xb9\x60\x26\xc2\xce\x7a\x1c\x8b\x7a\xc2\x53\xd5\x50\x92\xb5\x1e\x4e\x4f\x81\xe9\x4e\x1c\x1c\x90\x2d\xbb\x3a\x6a\x9c\x8b\x44\xdb\x4a\x6a\x6e\xcb\x7f\x28\xa2\x7f\x19\x93\x38\x88\xfa\x54\xb6\xd6\xc2\xf0\xb6\x15\x3f\x48\x5f\x6d\x99\x67\xad\x7e\xda\x77\x71\xe2\x9e\xed\x51\xaf\xd0\x4f\x18\x8e\x9f\x8b\x64\x7c\x8f\x8b\x65\x57\x8f\x6e\x53\x55\x5c\x24\xa0\x76\x71\xfc\x27\x9c\xed\x77\x87\x53\x32\x05\x89\x92\xec\x47\xaa\x45\x7f\x45\x3a\x23\x79\x17\x48\x4f\x03\x94\x0d\x83\x37\x03\x24\xb2\x14\x9b\x17\xe2\x81\x8b\x0f\xa4\x8b\x95\x24\x87\xa3\xd7\x50\x2c\x5f\x7e\xb3\x00\xa3\x74\x4c\x62\xd8\x19\xc5\x39\xfb\x67\x48\xc4\x05\x10\xfa\x40\x86\x21\x91\x2b\x76\x46\x35\x10\x60\xf1\xe8\x77\x88\x61\x95\x23\x41\x93\xa5\xff\xfc\xf6\xeb\x5f\xbf\xfc\x1c\x48\xff\xf9\xc7\xe7\xbf\x7f\xff\x9c\xee\xfb\x7a\x33\xa5\xc5\x83\x56\xbc\xc3\xbb\x0b\xbc\x09\xe8\x7c\x96\xbe\x3a\xbf\x4c\x67\x10\x8a\x75\x2c\x2a\xcb\x67\xcc\xfa\x55\xc9\xf2\x02\xab\xb4\x42\xe3\x61\x01\xa7\x31\xe0\x32\x1e\x99\xe4\x92\xa4\x71\xbc\x91\xe7\xe3\xd5\x64\x88\xa3\x7f\xf9\x76\x3d\x60\x87\x95\x33\x87\x53\xaf\xb9\x49\x7c\xb8\x7f\x63\x1c\x56\x81\x70\x7d\xad\xfa\xf7\x48\xaa\xd9\xcd\xc1\x53\xc0\x87\x19\xbf\x09\xfc\x77\xa9\x3a\xb4\xc1\xcf\xe1\x3b\xf8\x16\x78\xa3\x16\x6b\xac\xac\xa9\x67\xa3\x0e\xae\x9f\x84\x18\x32\x2c\x5e\xd8\x8c\xf0\xe6\x8b\xf5\x7e\xa9\xb6\x51\x83\x17\xb8\x09\x6d\x96\x8e\x55\xd6\x36\xca\x0a\xce\x4b\x1f\xdc\x3c\xe5\x99\x73\x7d\xb1\x8e\xc7\x5c\x24\x9b\xd0\x70\xc4\xf8\xf9\x61\xed\x9f\x87\xa6\x41\xca\x06\x9d\x7f\x1c\x32\x5a\x80\xb2\xc3\x30\x6e\x42\x33\x12\x3c\xb7\xf5\x8e\x11\xb0\x78\x3c\x17\x4b\x6d\x1d\xf2\xaa\x1c\xd3\x1b\xbe\x31\xc5\x05\xca\xfa\x99\xd6\xec\x9d\x8b\x07\xf1\x6f\x00\x00\x00\xff\xff\xb0\xd9\xbc\x02\x07\x07\x00\x00")

func installCommandCommandGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandCommandGo,
		"install/command/command.go",
	)
}

func installCommandCommandGo() (*asset, error) {
	bytes, err := installCommandCommandGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/command.go", size: 1799, mode: os.FileMode(420), modTime: time.Unix(1607003059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandContainerdGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xdd\x6e\xdc\xc6\x15\xbe\xde\x79\x8a\x13\x02\x11\xa8\x58\x4b\xee\x3a\x71\xfc\x57\xa6\xb0\x65\xa5\x50\xab\x48\x86\x64\x37\x08\x24\x81\x9e\x25\x0f\xb9\x63\x0d\x67\x88\x99\xe1\x4a\xf2\x62\xef\xfa\x87\x5e\xe5\xaa\x40\x6f\xd2\x8b\xa2\xe8\x1b\xf4\xa2\x79\x9d\xda\xe8\x63\x14\x33\x24\x97\x5c\x69\xd7\x76\x93\xab\x5d\xce\xf9\xce\xef\xcc\xf9\x99\x29\x69\x72\x41\x73\x84\x44\x16\x05\x15\x29\x21\xac\x28\xa5\x32\xe0\x93\x81\x37\xb9\x36\xa8\x3d\x32\xf0\x50\x24\x32\x65\x22\x0f\x5f\x6b\x29\xec\x42\x56\x18\x8f\x0c\x34\x52\x2e\x35\x78\x39\x33\xd3\x6a\x12\x24\xb2\x08\x33\x2a\xaa\xab\xb0\x26\x84\x4c\x68\x43\x39\xb7\x0c\x3d\xc8\xa5\x14\x29\x2a\x36\xa3\x22\xe4\x32\xcf\x51\x59\xba\x74\x7a\x0c\x5e\x99\xd0\x60\x51\x72\x6a\xd0\x23\xdb\x84\x98\xeb\x12\x61\x57\x0a\x43\x99\x40\x95\x82\x36\xaa\x4a\xcc\x7c\x41\x48\x56\x89\x04\x0e\xf1\xb2\x23\xfa\xdb\xa0\x0d\x96\xfb\xc2\xa0\xca\x68\x82\x30\x27\x83\x19\x55\x37\x16\x57\xbe\xc8\x60\x95\x18\xc1\x56\x27\x6f\xbe\x20\x03\x85\xa6\x52\xe2\x06\xd3\x82\x90\x44\x0a\x6d\x20\x59\x62\xbf\x66\x1c\x0f\x69\x61\x25\x78\xdd\x6a\x60\xf2\x37\x5e\x63\xaa\x9f\xc2\x67\x9d\xec\x6d\xe0\x6c\xe2\x0c\x56\x4c\xe4\xd6\x52\x96\xc1\x01\x9b\x40\x14\x81\xe7\xd9\xef\x56\xb5\x17\xce\xa8\x0a\x39\x9b\x84\x9d\x5c\x8f\x0c\x16\x80\x5c\x63\x1f\x78\xc0\x26\x64\xb0\x20\x8b\xf5\xea\x4e\x50\xa4\xcf\xeb\xbd\xf6\xa7\x52\x9b\x46\xf3\xb6\x95\xa0\x6f\xd0\x76\xe0\xf9\x45\xfe\x52\xf1\x9d\x35\x0e\x6e\x93\xc5\x06\x87\x5e\x50\x75\x4b\x72\x52\xa4\xf0\x28\x82\xac\x30\xc1\x49\xa9\x98\x30\x99\xef\x19\xaa\x60\x38\xb4\xa0\x72\x98\xc8\xa2\x94\x02\x85\xd1\xd1\x18\x86\x57\xb3\x37\x19\x84\x4a\x4a\x13\x7e\xaa\x61\xb8\x0b\x61\xa5\x55\xc8\x65\x42\x79\x38\x61\xc2\x5b\x6f\x4f\x73\x0c\x83\xdd\x22\x6d\xac\x4f\x8a\x74\x7b\x53\x1c\x76\xa5\xc8\x58\xbe\xc9\x50\xaf\xb8\x48\x99\x82\x61\x09\x1e\xdc\x81\x34\x70\x9b\xb4\x49\x83\x63\xea\xf3\x84\x68\x92\xd5\x5d\xda\xc0\x18\x86\x0d\x6b\x07\xb6\xae\x65\x2c\x87\x14\x33\x5a\x71\x03\x5f\xdd\x94\x16\xd6\x80\xc0\xc8\xc2\x66\x54\x23\x00\x93\xa9\x84\x33\xcf\x5a\x5b\x7b\xe3\xa7\x41\x0d\xb4\x01\xf2\xb7\xb7\xe1\x0e\x78\x67\xde\x07\xc5\x6d\x8a\xe1\xfa\x20\xee\x09\x3a\xe1\xb7\xcf\x51\x1b\xc4\x75\x46\x69\x54\x33\x96\xe0\x2d\xab\xdc\x0e\xb3\x49\xa8\xaf\xb5\xc1\x22\x6d\x7e\x7b\x86\xb6\x9c\x9b\xa3\xd9\x84\xa2\xe6\x4c\x0c\x07\x74\xe6\x01\xdc\x16\x02\x5b\x5b\xd0\xe1\x14\x6a\x43\x95\x59\x07\xfc\xbf\x43\xf2\x5b\x54\x9a\x49\xb1\x31\x26\xbd\x9d\x1e\x0e\x67\x35\x78\xb3\x4b\x75\x61\x0c\xbe\xa5\x4a\xf8\x5e\x59\x71\x0e\xa9\x4c\x2e\x50\xc1\xb4\x9a\xb4\xa5\x3a\x00\xbc\x7a\x04\x89\x51\xc0\x0a\x9a\xa3\x86\x1e\x2e\x60\xd2\x46\x55\x51\x75\x1d\x52\x5e\x32\x81\x8f\x3e\x0f\x1e\x78\x6b\x25\x4f\x8d\x29\x41\x61\xce\xb4\x51\xd7\xab\xc2\x6f\x49\x1f\x8f\x82\x51\xf0\xc5\xbd\xe0\xee\xdd\xbb\x6b\xe4\xc3\x70\x58\x72\xca\xc4\xd0\x8a\xf4\x36\xc7\xea\xa5\x68\x3a\xc3\xc6\x68\x75\x7b\xa4\x8d\x2c\x3f\xbc\x93\x29\xd3\x6e\xcb\x7f\xc2\xb1\x51\x05\x0c\x55\x76\xa3\xd4\x84\xd6\xf1\xad\x2d\xd8\x40\x5c\x6a\xf9\x0c\x3e\x5a\xfe\xed\x2a\xde\x57\x70\x23\x39\xdf\x27\x97\x65\x6d\x61\x82\x4f\x96\xcd\x62\x55\xd9\x4a\xf1\xda\x24\x67\xb1\x71\x7f\x56\x72\x15\x4e\xcf\xed\x1c\xd0\x36\xd3\xb6\x3b\xbf\xc0\x2b\x03\x51\x9b\xdf\xaf\x4e\x5f\x0a\x66\xce\xc9\x33\xd4\x89\x62\xa5\x61\x52\x44\xab\xb5\xad\xfe\x0b\xaa\x12\x86\x15\x48\x9e\xc9\xa4\x2a\x50\x18\xea\xa0\xf6\xbc\xe8\x47\x61\x3f\xeb\x99\x24\x4f\x32\x83\x2a\x12\x68\x2e\xa5\xba\x08\x0c\x55\x39\x1a\x02\x40\x4e\x4f\x6a\xfb\xce\xc9\xde\x15\x26\x27\x36\x85\xa3\x8d\x3b\x44\x8e\xeb\x24\x8f\x28\xbf\xa4\xd7\xba\xfd\x3c\xc1\x24\xba\x47\x9e\x21\xc7\x9c\x1a\x8c\xae\x51\x93\xdf\x30\xce\xbf\x91\x29\x46\xa5\x92\x09\x6a\x4d\x8e\x8e\xbe\x39\x49\xa4\xc2\x27\xe9\xeb\x4a\x9b\x68\xf8\xf0\xe1\x43\x72\xc0\x0a\x66\x0e\x8f\xbe\xde\x3f\xd8\x8b\xc6\xa3\x2f\x1e\xdc\xbb\xff\x65\xb3\xf6\xfc\xf8\x68\x37\x62\x22\x63\x82\x99\xeb\x7a\x6d\xf7\xe8\x78\xaf\x5b\xb2\x96\xef\xd7\xe7\xfe\x9c\x7c\x4b\x85\xc1\xf4\xe9\x75\x54\x54\xdc\xb0\x61\xa5\x51\xb5\x1e\xbe\xda\x5e\x8e\x1d\x75\xe8\xfd\x7e\xcc\x37\x36\xb6\x7e\xd5\xff\xb8\x3d\xb3\x8d\x16\x22\x38\xf3\xe6\xf3\x60\xf7\xe8\xf0\xc5\x93\xfd\xc3\xbd\xe3\x67\xf1\xc1\xfe\xd3\xc5\xe2\xcc\x23\xda\x50\x83\x8e\x1e\xaa\xaa\x1f\xd2\x33\x8f\x48\x59\xc4\xda\xc6\x06\x22\x18\x11\x72\x9a\xab\x32\x39\x27\x00\x34\x4d\x15\x6a\xbd\x8e\x6b\xa5\xa4\xcb\xe4\xe2\xcc\x23\x00\x15\x4b\x9d\x04\x80\x7c\xf9\xaf\xa0\x57\xb1\xc2\x64\x16\x17\xa8\x35\xcd\x31\xd6\xec\x8d\xd5\x33\xfe\xf2\xfe\xfd\xfb\x77\xc7\x5f\x36\x10\x3b\xb4\x6c\x84\x90\xd3\x14\x27\x55\x7e\xd3\xa4\x8d\x3a\x39\xce\x90\xb7\x10\x72\x5a\xa0\x51\x2c\xd1\x6b\xd9\xad\xab\xf1\x94\x69\x23\x73\x45\x0b\x88\x20\xa3\x5c\x23\x21\xa7\x49\xae\x64\x55\x5a\x9e\x92\x9a\x69\x27\xac\xe4\x55\xce\x84\x13\xd6\xfe\x0f\x6a\xac\x5b\x03\x10\x32\x2e\x95\x2c\xd0\x4c\xb1\xd2\x4b\x81\x7d\xb4\x62\x35\x52\x1b\x85\xb4\x88\x6d\x7e\xa2\x8a\xfb\xa6\x8d\xef\xde\x0f\x6c\x6d\x1e\x3b\x1b\x6f\x22\xdd\x44\x6f\x61\xa3\x86\x5c\x77\xc8\x58\x23\x67\xa2\xba\xea\xe9\x04\xd0\x54\xa4\x13\x79\x15\xbb\xb2\xef\x98\x2e\x1e\xe8\x20\x4f\x5c\x4f\x29\x69\xa5\x6d\xa9\xef\xd4\x50\xa3\xe3\x44\x72\x8e\x89\x89\x4b\x54\x4c\xda\x90\x8e\x47\x35\xb5\xee\xe9\x71\xed\xed\x8a\x96\xc6\x00\xc3\x75\x5c\x9b\x6a\xa7\xe0\x3e\xc0\x6e\xf1\xf2\xc4\xc4\x5c\xe6\x31\x67\xa2\xb7\xd1\x9f\x3f\xf8\xc2\xe1\xfa\x41\x0a\xba\x23\x56\xc7\x0b\x40\x0b\x5a\xea\xa9\x34\x06\x95\xf3\x45\xce\x50\x71\x7a\x9d\xe9\xc6\x81\x3a\xfa\x6c\xe6\x32\xa1\xd3\xbe\x51\x6e\xd0\xcc\x67\x71\x53\xc8\x5a\x3d\xd0\x56\xb6\xd8\xdd\x58\xac\x2a\x26\xfb\x7c\x0d\x39\x98\x8d\x03\x17\xf3\xa5\xfe\x8e\x13\x45\xce\x04\x76\x27\x6d\x95\xba\xcc\xd6\x25\x6d\x93\x89\x95\x30\xaa\xd2\x06\xd3\xd8\x16\x4e\x2e\x69\xfa\x11\xd6\xfe\x6c\x7b\x56\xad\x11\xac\xd5\x35\x61\x22\xb6\xf3\xb1\x2b\x09\xb2\x34\x61\x22\x98\xad\xd1\x4b\x91\xb6\x70\x75\x08\xd7\x08\x05\x0b\x05\x9a\x20\x5d\xc5\xb4\x65\x6c\xa3\xd6\x76\x88\x39\x5f\x17\xa0\x96\x18\x14\x4c\x29\xa9\x74\x17\x8b\xf7\xc2\x82\x33\x6f\x39\x52\x9d\x79\x1d\x93\x3d\xc2\x69\x29\x99\xb0\x41\x38\x3d\xf3\xda\x16\xd6\xf2\x0f\xc7\xc1\x5a\xbe\xf9\x5c\x51\x91\x23\xf4\x2b\xee\xf1\xde\xaf\xf6\x4f\x5e\x1c\x7f\x07\xc3\xc5\xe2\x43\xc6\xcc\xe7\x81\xad\xce\x9b\x0d\x59\x01\xcc\xe7\x28\x52\x2b\xf6\x76\xb0\xae\xee\x8d\x1e\xc6\x17\x78\x1d\x97\x94\xa9\x2e\x09\x5b\xc1\x36\x33\x13\x54\x26\xce\x18\xbf\x71\x06\x2c\xc9\x32\xae\x52\x96\xc2\x53\x96\x65\x43\xdd\xb6\x68\xcb\xd0\xde\x69\x9c\x7d\x97\x94\x5f\x30\x91\xd7\x16\x2e\x99\x5c\x4e\x34\x45\x6e\xca\x0a\x27\xb6\x3b\xd2\x43\xbb\xd6\xe8\x6f\xce\x9f\x43\xa8\x4a\x24\xab\xcb\xb7\x8e\xa5\x90\x71\x23\xb0\x57\xe2\xa6\xac\x88\x5d\x83\x58\x57\x6d\x65\x69\x6a\x43\x96\x65\xbc\x3e\xb6\xfd\xfe\xd7\x83\x37\x97\x88\x9a\x85\x09\x83\x6a\x46\xeb\x56\x32\x1e\xe9\x55\xa8\x4e\xa6\x98\x56\x1c\x55\x2b\xbf\xd2\x18\x9b\xa9\x42\x3d\x95\xdc\xb5\xa2\x60\x74\xb7\x89\x18\x47\x3b\x19\xad\x52\xeb\xc2\x58\xd5\x43\xd3\x0a\x69\x3c\x6a\x2a\x6e\xa3\x21\x4e\x91\xd3\xeb\xba\xe4\xeb\xae\x56\x2b\x53\x95\x3d\xd2\x78\x34\x2a\x2c\xd5\x4e\x1c\xa6\x28\xf9\x0e\xa0\x52\x76\xfe\x6e\x33\x2d\x38\xc4\x4b\xdf\xbd\xca\x78\xdb\xc1\x73\xaa\xf4\xcd\x59\xc4\x0e\xa3\x96\xe7\x93\x08\x04\xe3\x6e\x12\x6d\x2e\x18\x7b\xf6\xc0\x5a\xde\x26\x67\x4b\xcb\x0d\x19\x65\x1c\xd3\x47\x9e\xd3\x64\x67\xd3\x92\x0a\x96\xf8\x63\x37\x8e\xba\x59\x05\xc5\xec\x1b\x6a\x7b\x45\x41\x2f\xd0\x2f\x68\x79\x5a\x8f\x2b\xe7\xac\x7d\x7e\x99\x2f\xb6\xc9\xa0\x86\x9d\x7a\x6b\xb2\xc8\x3b\x87\x08\x8e\x9b\xcc\x79\xa2\xd4\x5a\xf0\xc1\xfe\x53\x87\x5b\x4e\xc9\x56\xf7\xa4\xca\x32\x54\xe0\x9e\xbd\x82\xa7\xee\x83\x0c\x62\x88\xc0\x06\x27\xb0\xc3\x66\x65\xd0\xdf\xaa\x61\x3b\x8d\xa9\xdd\xb4\x56\xaf\x07\x4f\x2d\xbb\xbf\xf9\xf6\xf3\x5c\x31\x61\x7c\x77\xdd\x49\xa9\xa1\xcb\xa0\x3f\xd1\x1a\x8d\xef\x35\x57\xa3\xb0\xb9\x88\xf5\xc7\x26\xf7\xfa\xf6\xe1\xa0\xd7\xa1\x6d\xe2\xd9\x5c\x35\x35\x9c\x9e\xd7\x81\xac\x3d\xb2\xa2\x82\x97\xa2\xa0\x4a\x4f\x29\xf7\x6b\x43\xb6\x5a\xf0\x36\x19\x64\x52\x41\xbc\x03\x33\x6b\x59\x5d\xb1\x96\x92\xac\x42\xf7\x98\xc3\x85\x3f\x7b\xef\x45\xe2\x6b\x34\xc9\xb4\x76\x35\x0c\xdb\x0a\x49\x4b\x16\xf4\x9e\x03\x15\x96\x52\xaf\x9f\x13\x43\x43\x73\xfd\xcb\x92\xe6\x18\x7d\x4e\x06\xae\x55\xd9\x95\xe6\x11\xd0\xd9\xe1\xde\xdc\x9a\x47\xb4\x57\xd6\xa9\x47\x9e\xa0\x05\x7a\xaf\xde\x17\x00\xeb\x1b\xb3\x8e\x8d\x1f\xc3\x63\x60\x77\xee\x38\x51\x95\xe2\xb7\xde\xaa\x7e\x96\xcd\x9f\xa6\xde\x0e\x30\x7b\xca\xdd\x10\x4e\x73\x8d\xd6\x0a\xfb\x87\x0c\x9a\xbd\x8f\xad\xca\x1c\xcd\x4b\xc5\xfd\x4a\x71\x0b\xb6\xf7\x3b\x6a\x68\x7f\x7b\xdf\xb3\x65\xb5\x58\xcb\x67\x19\x39\x0a\xbf\x59\x81\xaf\x60\x54\x33\x3b\x7f\x5f\x5b\x45\xa3\xc7\xf0\x1a\x7e\xd1\x47\x3d\x86\xd7\x8d\xfb\x83\xc1\x60\x19\xaa\x08\x68\x59\xa2\x48\xfd\x76\x65\xa7\x31\xff\xf4\xf5\x79\xd0\xbc\xba\x0d\x06\x36\xc2\x83\xfe\x43\xe4\x60\x30\x51\x48\x2f\x48\x43\x5a\xb8\x3d\x68\x8e\xe6\x33\x5b\x6e\x7d\xef\xed\x1f\xfe\xfa\xf6\xf7\xff\xb0\xae\xbc\xfb\xcb\x1f\xff\xf3\xe3\xbf\xec\x71\xae\xfb\xe4\xaf\xb5\x14\xcb\x5c\x90\x3a\x38\x2a\x51\xb8\xdb\xcc\x07\x33\x62\xc7\xc1\xe3\x6f\x8f\x8f\x0e\x0f\xbe\xdb\x81\xd1\xfd\x7b\xf7\x3e\x36\x49\x06\x52\x07\x7b\x57\xcc\xb4\x15\x28\x45\x5b\x00\x3a\x83\x82\x5d\x2e\x35\xfa\xee\xc9\xce\xea\xfa\xef\x3f\xff\xfe\xee\x87\xef\x6d\x45\x49\x64\x8a\xce\x54\xb7\x2d\x87\x78\xb9\x57\x2f\xf9\x1d\xb3\x2d\x53\xca\x8e\x35\x0d\x3a\xa8\x21\x7e\x3f\xcd\x7e\x82\x95\x5d\xbc\x1b\xe8\xbe\xc8\xa4\xef\xbd\xfb\xe1\x77\x6f\x7f\xfc\xf7\xbb\x3f\x7d\xff\xf6\xcf\x7f\xf3\x9c\x37\x64\x41\xfe\x17\x00\x00\xff\xff\x38\x6a\x22\xfe\xde\x17\x00\x00")

func installCommandContainerdGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandContainerdGo,
		"install/command/containerd.go",
	)
}

func installCommandContainerdGo() (*asset, error) {
	bytes, err := installCommandContainerdGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/containerd.go", size: 6110, mode: os.FileMode(420), modTime: time.Unix(1607003084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandContainerdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\xc1\x4e\xc3\x40\x0c\x44\xef\xfd\x8a\xaa\x67\x58\x79\xec\x24\x6d\xbf\x05\x71\x08\x08\x89\x03\x07\x84\x10\xdf\x8f\x4a\x5b\xf2\x6c\xdf\xde\x8e\xb3\xf6\x8e\x95\x79\xda\xed\xf7\x87\x1f\x8d\x69\xc4\xe1\xe1\x9f\x1d\x2c\xb0\x91\x1f\xbf\x5e\x73\xf1\x22\xe4\x2f\x5e\xde\xbe\xd7\xd4\xec\x26\xa9\x4b\xdb\xc5\x18\x67\xf0\x09\x7c\x04\x2f\xe0\x19\x3c\x81\x03\xec\x60\x81\x39\xf7\xcf\x41\x54\xc1\xab\xa0\x2a\xe4\x1e\xc5\x74\x74\xd3\xd1\x4d\xfb\xd0\xc4\x43\xf0\xe0\x3c\x88\x07\x36\x38\x83\x4f\xe0\x23\x78\x01\xcf\x60\xce\xe6\xe8\x34\x99\x9c\x6d\x7b\xe6\xbc\x35\xaf\x5b\xf3\xba\x35\xef\x5b\xf3\xbe\x35\xef\x5b\x13\x8c\x0a\x46\x05\xa3\x82\x51\xc1\xa8\x60\x54\x98\x2c\x8c\xd4\xd5\xa8\x57\xa1\x7d\xc1\x27\x25\xae\xd7\xad\x5e\x2f\xab\x30\xbc\xca\x46\xd4\xa2\x93\x73\xab\x9b\xc0\xaf\x59\x54\x2d\x26\x6e\xc5\xeb\xa6\xa3\x4b\xde\x25\x75\x29\xf7\x5a\x3f\x3e\xdf\xd7\xa5\x4b\x73\x97\xa6\x2e\x45\x97\xbc\x4b\xea\xd2\xfd\x11\x86\x70\x18\xc2\x61\x08\x87\x21\x1c\x86\x70\x18\xc2\x61\x08\x87\x21\x1c\x86\x70\x18\xb2\x60\xdb\xcf\x60\xc3\xee\x2d\x2f\x38\x6d\x18\x1b\xfa\x61\xf7\xbc\xfb\x0d\x00\x00\xff\xff\xe7\xaf\x3d\xd2\x91\x05\x00\x00")

func installCommandContainerdJsonBytes() ([]byte, error) {
	return bindataRead(
		_installCommandContainerdJson,
		"install/command/containerd.json",
	)
}

func installCommandContainerdJson() (*asset, error) {
	bytes, err := installCommandContainerdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/containerd.json", size: 1425, mode: os.FileMode(420), modTime: time.Unix(1607003059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandDockerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4f\x6f\x23\xb7\x15\x3f\x8b\x9f\xe2\x85\xd8\x35\x46\x1b\x69\xc6\x69\xb2\x9b\xd6\xc0\x04\xf0\xdf\xd4\x8d\xd7\x36\x64\x3b\x41\x20\x0b\x0e\x35\xf3\x46\x66\x3d\x43\x4e\x48\x8e\x6c\x45\x10\xd0\x43\xd3\x16\x39\x05\x28\x50\xb4\x3d\xa4\x05\x8a\xa0\xa7\x5e\x7b\x68\xf6\xe3\xd4\xdb\xde\xfa\x15\x0a\x92\x23\x59\x96\x65\x27\xeb\x18\x30\x46\x43\xbe\x3f\x3f\xbe\x1f\xdf\x9f\x29\x59\x72\xc1\x06\x08\x89\x2c\x0a\x26\x52\x42\x78\x51\x4a\x65\x20\x20\x0d\xda\x1f\x19\xd4\x94\x34\x28\x8a\x44\xa6\x5c\x0c\xa2\x5f\x6a\x29\xec\x42\x56\x18\xfb\x18\x70\x73\x5e\xf5\xc3\x44\x16\xd1\x61\x85\xea\x82\x1b\xb9\xc1\x65\x34\x90\x9f\x57\xa8\x46\x94\x34\x34\xb2\x5c\x6a\x98\x17\xcc\x98\xa8\xae\x22\xbf\x11\x71\xa1\x0d\xcb\xf3\x05\x5b\x97\x52\xa4\xa8\xf8\x90\x89\x28\x97\x83\x01\x2a\xbb\x2f\xd0\x44\xe7\xc6\x94\xf6\xb7\x74\xa8\xb4\x51\x5c\x0c\xdc\x4f\x83\x57\x26\x32\x58\x94\x39\x33\x48\x49\x93\x10\x33\x2a\x11\xb6\x64\x72\x81\x0a\xb4\x51\x55\x62\xc6\x13\x42\xb2\x4a\x24\xb0\x8f\x97\x7e\x23\x68\x82\x36\x58\xee\x0a\x83\x2a\x63\x09\xc2\x98\x34\x86\x4c\x2d\x2c\xde\x7a\x23\x8d\xdb\x9b\x31\xac\x78\x5b\xe3\x09\x69\x28\x34\x95\x12\x0b\x0a\x13\x42\x12\x29\xb4\x81\xd4\xc9\xed\xf0\x1c\xf7\x59\x61\x35\xa9\x5f\x09\xcd\xe0\x0b\x5a\x43\x0b\x52\x78\xe6\xed\x35\x21\xe7\x7d\x07\xd0\x1e\xd2\x22\xe3\x19\xec\xf1\x3e\xc4\x31\x50\x6a\xdf\xa7\xee\x68\x34\x64\x2a\xca\x79\x3f\xf2\xf6\x28\x69\x4c\x00\x73\x8d\xf3\x42\x7b\xbc\x4f\x1a\x13\x32\x59\xe2\xe7\x08\x45\x7a\xe8\x6f\x41\x70\x2e\xb5\xa9\x5d\x36\xad\xba\x5e\xd8\x6b\xc1\xe1\xc5\xe0\x44\xe5\xad\x85\xd3\x34\x97\x5a\x3e\x66\xea\x8e\xc5\xa4\x48\x61\x2d\x86\xac\x30\xe1\x51\xa9\xb8\x30\x59\x40\x0d\x53\xd0\x6e\x5b\xa1\xb2\x9d\xc8\xa2\x94\x02\x85\xd1\xf1\x3b\xd0\xbe\x1a\x7e\x91\x41\xa4\xa4\x34\xd1\x53\x0d\xed\x4d\x88\x2a\xad\xa2\x5c\x26\x2c\x8f\xfa\x5c\xd0\xbb\x38\xea\x2b\x17\x6e\x16\x69\x8d\x38\x29\xd2\xe5\xf0\x36\xa5\xc8\xf8\xe0\x3e\x84\xb4\xb8\x48\xb9\x82\x76\x09\x14\xde\x86\x34\x74\x74\xdc\x67\xde\x29\xcd\xeb\x44\x68\x92\x1b\x3e\x1e\x56\xc2\xe4\x5c\xc2\x29\xb5\x6e\x3c\x8c\x20\x0d\x13\x87\xcd\x1e\x2b\x68\x36\xe1\x6d\xa0\xa7\x14\x3e\x98\xb7\x1a\xa5\x0c\x0b\x29\xc2\x3a\x23\x7f\xf8\xa9\xb7\x05\xeb\xe7\x77\x99\x9e\x9e\x7a\x19\x18\x8d\x6a\xc8\x13\xbc\x83\xc6\x71\xc1\xfb\x91\x1e\x69\x83\x45\x5a\x3f\x6b\x80\x53\xad\xef\x3d\xbe\xd7\x4a\x4c\x0e\xe8\xa0\x01\xdc\x36\x00\x2b\x2b\x70\x23\xa3\x50\x1b\xa6\xcc\xa2\xd0\x1b\x85\xe0\x63\x54\x9a\x4b\x71\x6f\x0c\xbc\x69\x18\x7a\xb1\x37\x32\x7d\x22\xea\x92\x76\xaf\xf1\x9b\xa3\x68\x23\xcb\x87\x0f\x9b\x72\xed\x22\xf2\x86\x11\x55\x05\xb4\x55\xb6\x90\x2b\x91\xb2\x58\x57\x56\x60\xf9\x6e\x62\xd4\x03\x9b\x52\x18\xc6\x05\xaa\xf4\x19\x3c\xd2\xbb\x3f\xc2\xb3\x79\x1f\xb7\xcb\xd6\xfc\xce\xdc\x35\x7f\xc8\x21\xcf\xa6\x79\x09\x6f\xcd\xaa\xe2\x6d\x14\xb7\x72\xf7\x3e\x3b\xcb\xeb\xe2\xad\x5b\x0f\xdd\x9e\xed\x86\xd3\x0e\x31\x6d\x35\xc7\x78\x65\x20\x9e\x66\xca\x67\xdd\x13\xc1\x4d\x8f\x6c\xa1\x4e\x14\x2f\x0d\x97\x22\xae\x5b\xd0\x7a\x59\xe6\x3c\x61\x76\xc9\xd6\x1d\x1f\x4d\xd8\x16\x03\x2e\x90\x6c\xc9\xa4\x2a\x50\x18\xb7\x1d\xdb\x26\xa7\xd7\x22\x1b\x00\x1d\xd6\xcc\x27\xb2\x20\xeb\x99\x41\x15\x0b\x34\x97\x52\x5d\x84\x86\xa9\x01\x1a\x42\xba\x47\x1e\x66\x8f\x1c\x8f\x4a\x8c\x85\x34\x3c\x1b\x91\xed\x2b\x4c\x8e\x6c\x9e\xc4\x4b\x69\x48\x9d\x40\x07\x73\xc9\xd2\xd8\xad\x5f\xf0\x3c\x87\xb6\x86\x9f\x9f\x1c\xc2\x93\x97\xeb\xbb\xfb\x87\xbb\x5b\x64\x8f\x17\xdc\xec\x1f\xec\xec\xee\x6d\xc7\x5c\x64\x5c\x70\x33\xaa\x17\x0f\x3b\x07\x9b\x0b\x6b\x9b\x07\x9d\x39\xb1\x63\x5e\xa0\xac\x8c\x03\x71\x84\x49\xbc\x4a\xb6\x30\xc7\x01\x33\x18\x8f\x50\x93\x8f\x78\x9e\xbf\x94\x29\xc6\xa5\x92\x09\x6a\x4d\x48\x77\xd7\x27\x4e\x8f\x7c\xc2\x84\xc1\x74\x63\x14\x17\x55\x6e\x78\xbb\xd2\xb6\x47\xfa\xe3\x7e\xd6\x9c\x75\x59\x4f\x48\x30\xcf\x84\x4d\xc9\x3b\x34\xce\x57\xd2\x1f\xc6\xe2\x98\x00\x9c\x52\x85\x03\xae\x8d\x1a\xb5\x0b\xae\x94\x54\xfa\x94\xae\x41\x97\x80\xfd\x3b\xa5\x96\xa3\xb5\x28\x7a\xf7\xfd\x77\xd9\x8b\xe7\x3f\x7b\x2f\x2c\xc2\x94\xc9\x24\x97\x55\x1a\x72\x79\x4a\x09\x40\xaf\x45\x00\xc6\x63\x9e\x41\x8e\x02\xc2\xad\x83\xcd\x8f\xb6\x3b\x67\x9d\xed\x0f\x77\x8f\x8e\x3b\x9f\x4e\x26\xce\x07\x17\x1a\x93\x4a\x61\xbb\x76\xc6\xd1\xba\xf1\x4e\x00\xa0\x3b\x1e\x2b\x26\x06\x08\x4f\x78\xeb\xc9\x10\xd6\xe2\xbb\x66\x9c\x07\xfc\x1c\x9e\x70\x80\xd5\xc9\xe4\x94\x8e\xc7\x4f\x86\xfe\x69\x47\x80\xc9\xa4\x75\x6b\x49\xa4\x56\xc5\x3d\x6a\x80\xee\xb7\x03\x33\x50\xac\x3c\x3f\xa5\x6b\x56\x70\xea\x68\x6f\x77\xc3\x6a\x92\x89\x0d\xbc\x29\xca\xbc\x05\xa8\x94\xad\x63\xd3\xd8\x85\xfb\x78\x19\xb8\xf9\x8b\x36\xc3\x43\xa6\xf4\x22\x25\x36\x4b\xad\xce\x5b\x31\x08\x9e\xbb\x14\xf5\x43\x5d\xb8\x6d\xe3\x6a\x75\xbd\x38\x94\x56\x1b\x32\xc6\x73\x4c\xd7\xa8\xf3\x64\x93\xb6\x64\x82\x27\xc1\x3b\x2e\x4f\x1d\x6d\x28\x86\x2f\x59\x09\x31\x14\xec\x02\x83\x82\x95\x5d\xcf\x5c\x8f\x4f\x87\xae\xf1\xa4\x49\x1a\x5e\xac\x4b\x17\x62\x46\x7b\x10\x43\xa7\x26\x77\x5d\xa9\x3b\x82\x7b\xbb\x1b\x4e\x66\x56\x36\xac\xcf\x7e\x95\x65\xa8\xc0\x4d\xc4\xe1\x86\x7b\x21\x8d\x33\x88\xc1\x06\x25\xb4\xd9\x54\x19\x0c\x56\xbc\x58\xab\x86\x78\x73\x59\xfd\x7a\xb8\x61\xd5\x83\xe5\x9d\xe3\xd0\x0e\x43\x81\x6b\x15\x95\xca\x0f\x15\x66\xfc\xca\x35\x8c\x9b\x7a\x70\x29\x6c\xc2\xce\xd5\x84\x28\xe7\x6e\x98\xb6\x95\x23\xb1\x8f\x7e\x8e\xd1\xd5\x4f\x5f\x9c\xbd\x78\x2f\x7a\x6a\x07\xe3\x94\x19\x36\xa3\x6c\x5d\x6b\x34\x01\xad\x1b\x54\x54\x4f\xfc\xd3\x76\xed\x06\x89\xef\xa7\xab\x26\x45\xea\x70\xfb\x8a\x9b\x79\x5a\xea\x76\xa9\xa1\xdb\xf3\x7c\xf8\x00\x59\xbb\xe1\x89\x28\x98\xd2\xe7\x2c\x0f\x3c\xa2\x95\xa9\x70\x93\x34\x32\xa9\xe0\xac\x05\xf6\x7e\x83\xbf\xee\x33\x4b\xd6\xbb\x1b\x12\x73\x11\xcc\x4f\x8c\xb3\x00\xb5\x60\xd8\xbc\xb7\x80\xef\xa0\x49\xce\x67\x11\xfd\x31\xb1\xa4\x96\x48\x5d\xce\x22\x69\xcd\x84\x1f\xa2\xb1\x40\x1e\x1b\x32\x9e\xd9\x59\xa6\x0c\x8f\x0c\x33\x95\xde\x94\x29\x5a\x03\x3f\x59\x5d\x5d\x92\x22\xd6\x1f\x24\x56\x84\x6b\x10\xd2\x58\x31\xba\xc4\x66\x2a\x93\x19\xc6\xfa\x23\x2c\xf4\x5f\x3b\xae\xbf\xec\x28\x59\x74\x90\xa5\xa8\x02\xe7\x7a\x43\xa6\xa3\xc7\xc2\x67\xe7\xa6\x70\x31\x4d\x65\x12\xee\x70\x91\x06\x94\xd1\xe6\xbd\x37\xa1\x26\x79\xaa\xe4\x79\x76\x36\xc2\x7d\x99\xa2\xa7\x9a\x19\x53\x87\xb7\xc8\xc3\x75\x63\x14\x69\x34\x7c\x01\x0d\xec\x56\x13\x3e\x00\x1f\x1d\xbb\x5a\x7f\xfd\x85\x75\x37\xd5\x4e\xa4\xbb\xda\x0b\x3f\x66\x79\x6b\x3a\xc3\xd1\xa6\x97\x6f\xcc\x20\xc5\xc0\xca\x12\x45\x1a\x4c\x57\x5a\x30\xa7\xd8\x74\xc2\xf5\xf1\xb7\xb0\x5f\x0d\x02\x7a\xfd\xd5\x5f\xaf\xbf\xfc\xf6\x3f\xaf\x7e\x7f\xfd\x8f\x3f\x5e\xff\xea\xd5\xff\x5e\xfd\xf9\xa9\xa6\x77\xb5\x26\xc4\xfd\x4f\x48\x23\x8a\xc8\xa2\x89\xdf\xfc\xe9\xfa\xcb\x6f\x6d\x26\xbc\xfe\xc3\x6f\xff\xfd\xdd\x3f\x6d\xa0\x3c\xc0\x5f\x68\x29\x66\x94\x49\x1d\x1e\x94\x28\x5c\xaf\x7a\x30\x4d\x5b\x4e\xf4\xec\x93\xce\xc1\xfe\xde\xa7\x2d\x58\x7d\xff\xf9\xf3\xc7\xf2\x98\xa2\xad\x6b\x37\x60\xc2\xcd\x5c\x6a\xb4\x65\x2f\x72\x5f\xfb\xff\xfd\xfb\xdf\x5e\x7f\xf3\xb5\x2d\x92\xf6\xfe\x39\x98\x2e\xa3\xf7\xf1\x72\xdb\x2f\x05\x37\xca\xb6\xea\x2a\x05\x31\xd4\xd2\xa1\x17\x09\xe6\xd3\xfd\x11\x28\x6f\xbe\x66\x6b\xd1\x5d\x91\xc9\x80\xbe\xfe\xe6\xd7\xd7\xdf\xfd\xeb\xf5\xef\xbe\xbe\xfe\xea\x2f\xd4\x9d\x86\x4c\xc8\xff\x03\x00\x00\xff\xff\xa3\x71\x13\x3f\xd0\x10\x00\x00")

func installCommandDockerGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandDockerGo,
		"install/command/docker.go",
	)
}

func installCommandDockerGo() (*asset, error) {
	bytes, err := installCommandDockerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/docker.go", size: 4304, mode: os.FileMode(420), modTime: time.Unix(1607001191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandDockerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\xaa\xc3\x30\x10\x44\x7b\x9f\xc2\xb8\xfe\x16\x96\xfc\x23\x4b\x67\x09\x29\x82\x23\x52\x24\x60\xb0\x5d\x84\x9c\x3e\xb0\x2a\x77\x1f\xa8\x7d\x33\x3b\x62\x47\x7b\xed\xfa\x7e\x78\x6c\xeb\xab\xec\xa3\x5f\xdc\x34\xbb\x69\x5c\x8b\x3b\x9f\xdf\xe1\x4f\x49\x9e\xa5\x40\x52\xe4\xc0\xc8\x81\x91\x03\x33\x07\x66\x0c\xf4\x01\xa7\x7c\x80\xa9\xc4\x6d\x24\x6e\x23\xf1\xca\x89\x57\x4e\xbc\xb2\x48\x33\x49\xd9\x4d\xc0\x3d\xf0\x00\x7c\x06\xfe\x0f\xfc\x02\x3c\x02\x5f\x80\x27\xe0\x59\xf3\x2c\x3f\x02\xdc\xd8\xb7\x72\x1c\xc0\x09\xa3\xa2\x2a\x18\x1d\x55\xc1\x28\x49\x04\x4a\xa2\x20\xca\x31\xca\x16\x6e\x94\x2d\xdc\x28\x5b\xb8\x51\xb6\x70\x5d\xf6\xbe\x6d\xe7\xbb\x1c\xc7\x58\x3e\xe7\x7e\x3f\xb0\x7c\xdb\xa7\xab\x05\x5f\x73\x60\x73\xa2\xae\x1c\x8c\xfa\x0f\xc0\xa8\x3f\xc5\x36\xb6\xbe\xdc\xfa\x70\xeb\xbb\xfa\x38\x6c\x9f\x3e\x16\xdb\xa7\x8f\xc7\xf6\xe9\x63\xb2\x7d\xf5\xb8\xba\x5b\xf7\x0b\x00\x00\xff\xff\xe6\x5c\x6b\x37\x6d\x06\x00\x00")

func installCommandDockerJsonBytes() ([]byte, error) {
	return bindataRead(
		_installCommandDockerJson,
		"install/command/docker.json",
	)
}

func installCommandDockerJson() (*asset, error) {
	bytes, err := installCommandDockerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/docker.json", size: 1645, mode: os.FileMode(420), modTime: time.Unix(1607003059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"install/command/assert.go":       installCommandAssertGo,
	"install/command/command.go":      installCommandCommandGo,
	"install/command/containerd.go":   installCommandContainerdGo,
	"install/command/containerd.json": installCommandContainerdJson,
	"install/command/docker.go":       installCommandDockerGo,
	"install/command/docker.json":     installCommandDockerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"install": &bintree{nil, map[string]*bintree{
		"command": &bintree{nil, map[string]*bintree{
			"assert.go":       &bintree{installCommandAssertGo, map[string]*bintree{}},
			"command.go":      &bintree{installCommandCommandGo, map[string]*bintree{}},
			"containerd.go":   &bintree{installCommandContainerdGo, map[string]*bintree{}},
			"containerd.json": &bintree{installCommandContainerdJson, map[string]*bintree{}},
			"docker.go":       &bintree{installCommandDockerGo, map[string]*bintree{}},
			"docker.json":     &bintree{installCommandDockerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
