// Code generated by go-bindata.
// sources:
// install/command/assert.go
// install/command/command.go
// install/command/containerd.go
// install/command/containerd.json
// install/command/docker.go
// install/command/docker.json
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installCommandAssertGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func installCommandAssertGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandAssertGo,
		"install/command/assert.go",
	)
}

func installCommandAssertGo() (*asset, error) {
	bytes, err := installCommandAssertGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/assert.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1569419103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandCommandGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4f\x6b\xdb\x40\x10\xc5\xcf\x3b\x9f\x62\x58\x48\x90\xc0\xb6\xee\x85\x1c\x8a\x69\x9b\x42\x69\x4d\xd3\xb4\x87\x90\xc3\x7a\x35\x92\x97\xec\x1f\xb1\x3b\x4e\xe2\x06\x7f\xf7\xb2\xb2\xa4\xda\x2a\xd4\x27\xf3\xf4\xe6\x37\xf3\x66\x77\x3b\xa5\x9f\x54\x4b\xa8\x83\x73\xca\xd7\x00\xc6\x75\x21\x32\x16\x20\x64\xe3\x58\x82\x48\xa4\x6c\x48\x28\x5b\xc3\xbb\xfd\x76\xa5\x83\xab\x1a\xe5\xf7\xaf\xd5\xe9\x43\x65\x7c\x62\x65\xad\x04\x21\x13\x47\xe3\xdb\x24\xa1\x04\x78\x56\x31\x43\xbe\x53\x6b\x12\xc7\xc3\xfb\x18\xf1\xe1\xf1\x64\x00\xf1\xc5\x6c\x71\xfc\x8d\xda\xe6\xa9\xbd\x8f\xf6\x42\x2b\x01\xf8\xd0\x11\x26\xa6\xee\xb3\x67\x8a\x8d\xd2\x84\x66\xfa\xf7\x06\xe2\x8e\x7c\xbd\x39\x65\x28\x76\x21\xf1\x50\x5a\x82\xf8\xa1\xe2\x4c\x59\x07\xdf\x98\x76\x26\x7e\xf0\x6a\x6b\xe7\xb5\x3f\x29\x26\x13\xfc\x4c\xbd\xf7\x43\xd6\x99\xbe\x89\xc6\x73\x51\x02\x88\xaa\x02\x61\xcd\xb6\x28\xa7\x54\x89\xe2\xb3\xd1\xf4\xd1\x58\x2a\x4a\x7c\x78\xdc\x1e\x98\x40\xe8\x7e\x92\x4b\xf1\x08\xd0\xec\xbd\xc6\x34\x4b\xb4\xc0\x7d\xb4\x0b\x6c\x8c\xa5\xaf\xca\xd1\xd8\x36\x87\xaf\xaa\xe0\xed\x01\x77\xcc\x1d\x08\x93\x6e\x99\x3b\x7c\x77\x33\x38\xd2\xea\x56\xa5\x4d\xa4\xc6\xbc\x16\x3d\x41\x66\x9f\x2c\x41\xd4\xe1\xc5\xdb\xa0\xea\xb5\xab\xb3\x5d\x4a\x10\xa6\xc1\xa1\xfe\x0d\xc4\x64\xd8\xa8\xa8\xdc\x68\xc9\x9e\xff\x91\x93\xec\x67\x9a\x57\xdf\xa0\x5c\x2e\x7d\x58\xea\x1d\xe9\xa7\xa5\xa6\xc8\xa6\x31\x5a\x31\x65\xe4\xf1\xac\x59\x9e\xe6\x06\x1b\xc7\xab\xbb\x2e\x2f\xb4\x29\x24\xbe\xb4\xc4\x78\x95\x70\xf9\x0d\xaf\x92\x5c\xe0\x05\xfa\xef\x4e\x4a\xc8\xa4\x48\x2e\x30\x0d\xa1\x2e\x38\xba\xc6\x2a\x86\xc0\x78\x7d\x8d\x19\x77\x95\xf0\x0c\xb6\x76\x75\xbf\xe3\x12\x84\x0d\x5a\xd9\x7c\x2c\xff\x20\xfa\xfa\xaa\x1f\xe2\xac\xeb\xe5\xda\xda\x80\xa7\x37\xb1\xfa\xa5\x58\xef\x32\xe7\xce\xfc\x1e\x4f\x71\x62\x2f\x46\xd7\x27\xe2\xc9\x93\xfb\x97\x20\x86\xd7\xb6\x5a\xbb\x7a\x28\x9b\x52\xe5\x90\x48\x36\xf5\xd7\x7e\xf2\x85\xee\x70\x7e\x4b\xa6\x26\xfd\x4a\x8e\xf0\x27\x00\x00\xff\xff\x1e\x58\xe1\xde\xdf\x03\x00\x00")

func installCommandCommandGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandCommandGo,
		"install/command/command.go",
	)
}

func installCommandCommandGo() (*asset, error) {
	bytes, err := installCommandCommandGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/command.go", size: 991, mode: os.FileMode(420), modTime: time.Unix(1569151330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandContainerdGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x6d\x6f\xdb\x38\x12\xfe\x6c\xfe\x8a\x59\x01\x0d\xec\xdd\x48\xb2\xdd\x97\xb4\x05\x74\x40\x93\x66\x0f\xc1\xa5\x49\x90\xb4\xb7\x38\x38\x81\x96\x96\x46\x32\x2f\x14\x29\x90\x94\x63\xd7\xf0\x7f\x3f\x50\x2f\x96\x9c\x58\xdb\xde\xdd\x27\xd3\x9a\x67\x9e\x19\x0e\x39\x2f\x52\x4e\xa3\x47\x9a\x22\x44\x32\xcb\xa8\x88\x09\x61\x59\x2e\x95\x81\x21\x19\x38\xf3\xb5\x41\xed\x90\x81\x93\x64\xc6\x21\x03\x8d\x94\x4b\x0d\x4e\xca\xcc\xa2\x98\x7b\x91\xcc\xfc\x84\x8a\x62\xe5\x57\x02\x9f\x09\x6d\x28\xe7\x56\xa1\x03\x79\x92\x22\x46\xc5\x96\x54\xf8\x5c\xa6\x29\x2a\x2b\x37\xb8\x32\xbe\xc1\x2c\xe7\xd4\xa0\x43\x46\x84\x98\x75\x8e\x70\x26\x85\xa1\x4c\xa0\x8a\x41\x1b\x55\x44\x66\xb3\x25\x24\x29\x44\x04\x57\xf8\xd4\x0a\x87\x23\xd0\x06\xf3\x0b\x61\x50\x25\x34\x42\xd8\x90\xc1\x92\xaa\x67\x0f\xf7\xfe\x91\xc1\xbe\x30\x80\xa3\x96\x6f\xb3\x25\x03\x85\xa6\x50\xe2\x99\xd2\x96\x90\x48\x0a\x6d\x20\xda\x61\x7f\x67\x1c\xaf\x68\x66\x19\x9c\xf6\xa9\x67\xd2\xef\x4e\xed\xea\x30\x86\x5f\x5b\xee\x11\x70\x36\x2f\x1d\x56\x4c\xa4\xd6\x53\x96\xc0\x25\x9b\x43\x10\x80\xe3\xd8\xff\x8d\x69\xc7\x5f\x52\xe5\x73\x36\xf7\x5b\x5e\x87\x0c\xb6\x80\x5c\x63\x17\x78\xc9\xe6\x64\xb0\x25\xdb\xc3\xe6\xee\x50\xc4\x37\xd5\xa1\x0e\x17\x52\x9b\xda\xf2\xc8\x32\xe8\x67\xb2\x63\xb8\x79\x4c\xbf\x29\x7e\x7c\x60\x83\x23\xb2\xed\xd9\xd0\x57\xaa\x5e\x30\x47\x59\x0c\x1f\x03\x48\x32\xe3\xdd\xe5\x8a\x09\x93\x0c\x1d\x43\x15\xb8\xae\x05\xe5\x6e\x24\xb3\x5c\x0a\x14\x46\x07\x13\x70\x57\xcb\xef\x09\xf8\x4a\x4a\xe3\xbf\xd2\xe0\x9e\x81\x5f\x68\xe5\x73\x19\x51\xee\xcf\x99\x70\x0e\xfb\x53\x5f\x40\xef\x2c\x8b\x6b\xef\xa3\x2c\x1e\xf5\xc5\xe1\x4c\x8a\x84\xa5\x7d\x8e\x3a\xd9\x63\xcc\x14\xb8\x39\x38\xf0\x1b\xc4\x5e\x79\x48\x7d\x16\x4a\xa5\xae\x8e\x8f\x26\xda\x3f\xa5\x1e\x45\xdf\xaf\x55\x5b\xb0\xdd\x5a\xc2\x52\x88\x31\xa1\x05\x37\xf0\xb7\xe7\x6c\x7e\x05\xf0\x8c\xcc\x6c\x2e\xd5\x04\x18\x2d\x24\xdc\x3b\xd6\xdb\x6a\x37\xc3\xd8\xab\x80\x36\x40\xc3\xd1\x08\x7e\x03\xe7\xde\xf9\x21\x5d\x5f\x0c\x0f\x07\xf1\x5c\xd0\x39\x7f\x79\x8f\x9a\x20\x1e\x72\x4a\xa3\x5a\xb2\x08\x5f\x78\x55\x9e\x30\x9b\xfb\x7a\xad\x0d\x66\x71\xfd\xdb\x71\xb4\xd1\xec\x8f\x66\x1d\x8a\x4a\x33\x32\x1c\xb0\x74\x0f\xe0\x25\x09\x1c\x1d\x41\x8b\x53\xa8\x0d\x55\xe6\x10\xf0\xbf\x0e\xc9\x3f\x51\x69\x26\x45\x6f\x4c\x3a\x27\xed\xba\xcb\x0a\xdc\xbf\xa5\xaa\x24\x7a\x7f\x50\x25\x86\x4e\x5e\x70\x0e\xb1\x8c\x1e\x51\xc1\xa2\x98\x37\x35\xd9\x03\x5c\x7d\x84\xc8\x28\x60\x19\x4d\x51\x43\x07\xe7\x31\x69\xa3\xaa\xa8\x5a\xfb\x94\xe7\x4c\xe0\xc7\xd7\xde\x7b\xe7\x20\xf3\xc2\x98\x1c\x14\xa6\x4c\x1b\xb5\xde\x27\x7f\xc1\x3e\x19\x7b\x63\xef\xcd\x5b\x6f\x3a\x9d\x1e\xe0\x07\xd7\xcd\x39\x65\xc2\xb5\x94\x4e\x7f\xac\xbe\x89\xba\x27\xf4\x46\xab\x3d\x23\x6d\x64\xfe\xe3\x93\x8c\x99\x2e\x8f\xfc\x7f\xb8\x36\x2a\x03\x57\x25\xcf\x4a\x8d\x6f\x37\x7e\x74\x04\x3d\xc2\x9d\x95\x5f\xe1\xa7\xf9\x5f\x56\xf1\xae\x81\x67\xc9\xf9\x57\xbc\x2c\x69\x0a\x13\xfc\xb2\x6b\x16\xfb\xc6\xf6\x8a\x57\x1f\xcf\xb6\xf7\x7c\xf6\x72\x15\x66\x0f\xb6\xe1\x37\xcd\xb4\xe9\xce\x5f\x71\x65\x20\x68\xf2\xfb\xcf\xd9\x37\xc1\xcc\x03\xf9\x8c\x3a\x52\x2c\x37\x4c\x8a\x60\xbf\xb6\x55\x4b\x50\x85\x30\x2c\x43\xf2\x59\x46\x45\x86\xc2\xd0\x12\x6a\xef\x8b\xfe\xe8\x77\xb3\x9e\x49\xf2\x29\x31\xa8\x02\x81\xe6\x49\xaa\x47\xcf\x50\x95\xa2\x21\x00\x64\x76\x57\xf9\xf7\x40\xce\x57\x18\xdd\xd9\x14\x0e\x7a\x4f\x88\xdc\x56\x49\x1e\x50\xfe\x44\xd7\xba\xf9\x7b\x87\x51\xf0\x96\x7c\x46\x8e\x29\x35\x18\xac\x51\x93\x7f\x30\xce\xbf\xc8\x18\x83\x5c\xc9\x08\xb5\x26\xd7\xd7\x5f\xee\x22\xa9\xf0\x53\xfc\xef\x42\x9b\xc0\xfd\xf0\xe1\x03\xb9\x64\x19\x33\x57\xd7\xbf\x5f\x5c\x9e\x07\x93\xf1\x9b\xf7\x6f\x4f\xde\xd5\xcf\x6e\x6e\xaf\xcf\x02\x26\x12\x26\x98\x59\x57\xcf\xce\xae\x6f\xcf\xdb\x47\xd6\xf3\x8b\xea\xde\x3f\x90\x3f\xa8\x30\x18\x9f\xae\x83\xac\xe0\x86\xb9\x85\x46\xd5\xec\xf0\xcf\xd1\x6e\xec\xa8\x42\x3f\xec\xc6\xbc\xb7\xb1\x75\xab\xfe\xcf\x9d\x99\x6d\xb4\x10\xc0\xbd\xb3\xd9\x78\x67\xd7\x57\x5f\x3f\x5d\x5c\x9d\xdf\x7e\x0e\x2f\x2f\x4e\xb7\xdb\x7b\x87\x68\x43\x0d\x96\x72\x5f\x15\xdd\x90\xde\x3b\x44\xca\x2c\xd4\x36\x36\x10\xc0\x98\x90\x59\xaa\xf2\xe8\x81\x00\xd0\x38\x56\xa8\xf5\x21\xad\xbd\x92\x2e\xa3\xc7\x7b\x87\x00\x14\x2c\x2e\x19\x00\xd2\xdd\x2a\xa3\xab\x50\x61\xb4\x0c\x33\xd4\x9a\xa6\x18\x6a\xf6\xdd\xda\x99\xbc\x3b\x39\x39\x99\x4e\xde\xd5\x10\x3b\xb4\xf4\x42\xc8\x2c\xc6\x79\x91\x3e\x77\xa9\xd7\x26\xc7\x25\xf2\x06\x42\x66\x19\x1a\xc5\x22\x7d\x50\xdd\x6e\x35\x5c\x30\x6d\x64\xaa\x68\x06\x01\x24\x94\x6b\x24\x64\x16\xa5\x4a\x16\xb9\xd5\xc9\xa9\x59\xb4\x64\x39\x2f\x52\x26\x4a\xb2\x66\xed\x55\xd8\xf2\x19\x80\x90\x61\xae\x64\x86\x66\x81\x85\xde\x11\x76\xd1\x8a\x55\x48\x6d\x14\xd2\x2c\xb4\xf9\x89\x2a\xec\xba\x36\x99\x9e\x78\xb6\x36\x4f\x4a\x1f\x9f\x23\xcb\xd1\xdd\xc2\xc6\xb5\xb8\xea\x90\xa1\x46\xce\x44\xb1\xea\xd8\x04\xd0\x54\xc4\x73\xb9\x0a\xcb\xb2\x5f\x2a\x3d\xbe\xd7\x5e\x1a\x95\x3d\x25\xa7\x85\xb6\xa5\xbe\x35\x43\x8d\x0e\x23\xc9\x39\x46\x26\xcc\x51\x31\x69\x43\x3a\x19\x57\xd2\xaa\xa7\x87\xd5\x6e\xf7\xac\xd4\x0e\x18\xae\xc3\xca\x55\x3b\x05\x77\x01\xf6\x88\x77\x37\x26\xe4\x32\x0d\x39\x13\x9d\x83\x7e\xfd\xfe\x4d\x89\xeb\x06\xc9\x6b\xaf\x58\x15\x2f\x00\x2d\x68\xae\x17\xd2\x18\x54\xe5\x5e\xe4\x12\x15\xa7\xeb\x44\xd7\x1b\xa8\xa2\xcf\x96\x65\x26\xb4\xd6\x7b\x79\xbd\x7a\x3e\x0b\xeb\x42\xd6\xd8\x81\xa6\xb2\x85\xe5\x1b\x8b\x35\xc5\x64\x57\xaf\x16\x7b\xcb\x89\x57\xc6\x7c\x67\xbf\xd5\x44\x91\x32\x81\xed\x4d\xdb\x97\xee\xb2\x75\x27\xeb\x73\xb1\x10\x46\x15\xda\x60\x1c\xda\xc2\xc9\x25\x8d\x7f\xc2\xdb\xff\xdb\x9f\x7d\x6f\x04\x6b\x6c\xcd\x99\x08\xed\x7c\x5c\x96\x04\x99\x1b\x3f\x12\xcc\xd6\xe8\x1d\xa5\x2d\x5c\x2d\xa2\x6c\x84\x82\xf9\x02\x8d\x17\xef\x63\x9a\x32\xd6\x6b\xb5\x19\x62\x1e\x0e\x05\xa8\x11\x7a\x19\x53\x4a\x2a\xdd\xc6\xe2\x2f\x61\xde\xbd\xb3\x1b\xa9\xee\x9d\x56\xc9\x5e\xe1\x38\x97\x4c\xd8\x20\xcc\xee\x9d\xa6\x85\x35\xfa\xee\xc4\x3b\xa8\xb7\xd9\x28\x2a\x52\x84\x6e\xc5\xbd\x3d\xff\xfb\xc5\xdd\xd7\xdb\x7f\x81\xbb\xdd\xfe\xc8\x99\xcd\xc6\xb3\xd5\xb9\xdf\x91\x3d\xc0\x66\x83\x22\xb6\xb4\x2f\x83\xb5\x7a\x3b\xfe\x10\x3e\xe2\x3a\xcc\x29\x53\x6d\x12\x36\xc4\x36\x33\x23\x54\x26\x4c\x18\x7f\x76\x07\xac\xc8\x2a\xee\x4b\x76\xe4\x31\x4b\x12\x57\x37\x2d\xda\x2a\x34\xef\x34\xa5\x7f\x4f\x94\x3f\x32\x91\x56\x1e\xee\x94\xca\x9c\xa8\x8b\xdc\x82\x65\x25\x6d\x7b\xa5\x5d\xfb\xac\xb6\x5f\xdf\xbf\x12\xa1\x0a\x11\xed\x3f\x7e\x71\x2d\x85\x0c\x6b\xc2\x4e\x89\x5b\xb0\x2c\x2c\x1b\xc4\xa1\x6a\x2b\x73\x53\x39\xb2\x2b\xe3\xd5\xb5\xed\xf6\xbf\x0e\xbc\x7e\x89\xa8\x54\x98\x30\xa8\x96\xb4\x6a\x25\x93\xb1\xde\x87\xea\x68\x81\x71\xc1\x51\x35\xfc\x85\xc6\xd0\x2c\x14\xea\x85\xe4\x65\x2b\xf2\xc6\xd3\x3a\x62\x1c\xed\x64\xb4\x2f\xad\x0a\x63\x51\x0d\x4d\x7b\xa2\xc9\xb8\xae\xb8\xb5\x85\x30\x46\x4e\xd7\x55\xc9\xd7\x6d\xad\x56\xa6\xc8\x3b\xa2\xc9\x78\x9c\x59\xa9\x9d\x38\x4c\x96\xf3\x63\x40\xa5\xec\xfc\xdd\x64\x9a\x77\x85\x4f\xc3\xf2\xab\x8c\x33\xf2\x6e\xa8\xd2\xcf\x67\x11\x3b\x8c\x5a\x9d\x5f\x02\x10\x8c\x97\x93\x68\xfd\x82\x71\x6e\x2f\xac\xd5\xad\x73\x36\xb7\xda\x90\x50\xc6\x31\xfe\xe8\x94\x96\xec\x6c\x9a\x53\xc1\xa2\xe1\xa4\x1c\x47\xcb\x59\x05\xc5\xf2\x0b\xb5\xbd\x22\xa3\x8f\x38\xcc\x68\x3e\xab\xc6\x95\x07\xd6\x7c\x7e\xd9\x6c\x47\x64\x50\xc1\x66\xce\x81\x2c\x72\x1e\x20\x80\xdb\x3a\x73\x3e\x29\x75\x10\x7c\x79\x71\x5a\xe2\x76\x53\xb2\xb5\x3d\x2f\x92\x04\x15\x94\xdf\xb7\xbc\xd3\xf2\x0f\x19\x84\x10\x80\x0d\x8e\x67\x87\xcd\xc2\xe0\xf0\xa8\x82\x1d\xd7\xae\xb6\xd3\x5a\xf5\xdc\x3b\xb5\xea\xc3\xfe\xb7\x9f\x1b\xc5\x84\x19\x96\xaf\x3b\x85\xe2\x37\x0a\x13\xb6\x2a\x5f\x7a\x9a\x12\xd2\xf9\x4a\x76\x70\x7c\xf2\x15\x72\xa4\x1a\xb5\x1f\xcb\x27\x61\xeb\xbb\xbf\x7c\xa5\x3b\x00\xf7\x55\x9d\x50\x2e\xcd\xe2\x77\x6f\xec\x60\xe9\xa5\xdf\x1d\x32\xa8\xdf\x3b\xb5\x35\x37\x7b\xa8\x02\x6b\xcf\xcc\x99\x78\x13\x6f\xec\x1c\x37\xcb\x49\xbb\x9c\xb6\xcb\xd7\xed\xf2\x4d\xbb\x7c\xdb\x2e\xdf\xb5\xcb\x13\xe7\x98\x54\xeb\x69\x4b\x3c\x6d\x89\xa7\x2d\xf1\xb4\x25\x9e\xb6\xc4\xd3\x96\x78\xda\x12\x4f\x4b\xe2\xc1\x96\x90\x41\x22\x15\x84\xc7\xb0\xb4\x7b\xa9\x4a\xea\x6e\x77\x76\x4b\xe5\xd7\x26\x2e\x86\xdd\x4f\x4f\xbb\x70\x1f\xc3\xf2\x18\x96\xa3\xfa\x25\xe8\x3f\x01\x00\x00\xff\xff\xe6\xf2\x70\x2e\xec\x14\x00\x00")

func installCommandContainerdGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandContainerdGo,
		"install/command/containerd.go",
	)
}

func installCommandContainerdGo() (*asset, error) {
	bytes, err := installCommandContainerdGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/containerd.go", size: 5356, mode: os.FileMode(420), modTime: time.Unix(1569151330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandContainerdJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xbb\x0d\x80\x30\x0c\x00\xd1\xde\x53\x44\xae\x23\x0b\x1f\x9f\x0c\x83\xd8\x7f\x0d\x0a\x84\xae\x7b\xd5\xbb\x63\x8c\xec\xea\xda\x72\xfe\x6c\x89\xdc\xe5\x21\x4f\x79\xc9\x95\x33\x3e\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\xd4\xca\x78\xe2\x0d\x00\x00\xff\xff\xb9\x59\xc2\x95\xb4\x00\x00\x00")

func installCommandContainerdJsonBytes() ([]byte, error) {
	return bindataRead(
		_installCommandContainerdJson,
		"install/command/containerd.json",
	)
}

func installCommandContainerdJson() (*asset, error) {
	bytes, err := installCommandContainerdJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/containerd.json", size: 180, mode: os.FileMode(420), modTime: time.Unix(1569418365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandDockerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x7b\x53\xe3\x38\x12\xff\x3b\xfa\x14\x3d\x2a\x96\x72\x66\x13\x1b\x86\x59\x06\xa8\xf2\x55\xf1\xda\x3b\x6a\x19\x86\xe2\x71\x57\x57\x81\x9a\x55\xec\x76\xd0\x21\x4b\x3e\x49\x09\x64\x53\xf9\xee\x57\x92\x1c\x88\xe3\xc0\xed\x2c\xff\x98\x6e\xf5\xe3\xa7\x6e\xf5\x23\x15\xcb\x1e\xd9\x08\x21\x53\x65\xc9\x64\x4e\x08\x2f\x2b\xa5\x2d\x44\xa4\x43\x87\x53\x8b\x86\x92\x0e\x45\x99\xa9\x9c\xcb\x51\xf2\x1f\xa3\xa4\x63\x14\xa5\xa5\xa4\x63\x90\x09\x65\x80\x8e\xb8\x7d\x18\x0f\xe3\x4c\x95\x49\xc1\xe4\xf8\x39\x09\x07\x09\x97\xc6\x32\x21\x9c\xc2\x92\xc8\x93\x92\x39\x6a\x3e\x61\x32\x11\x6a\x34\x42\xed\xce\x2d\x3e\xdb\xc4\x62\x59\x09\x66\x91\x92\x2e\x21\x76\x5a\x21\x9c\xa8\xec\x11\x35\x18\xab\xc7\x99\x9d\xcd\x09\x29\xc6\x32\x83\x0b\x7c\x0a\x07\x51\x17\x8c\xc5\xea\x4c\x5a\xd4\x05\xcb\x10\x66\xa4\x33\x61\x7a\x85\xd9\xa0\x48\xa7\x79\x98\xc2\x66\xb0\x35\x9b\x93\x8e\x46\x3b\xd6\x72\x45\x61\x4e\x48\xa6\xa4\xb1\x90\x7b\xb9\x5f\xb9\xc0\x0b\x56\x3a\x4d\x1a\x38\xb1\x1d\xfd\x41\x6b\x68\x51\x0e\x1f\x83\xbd\x2e\x08\x3e\xf4\x00\x35\x97\x23\x87\x8c\x17\x70\xce\x87\x90\xa6\x40\xa9\xa3\x17\xee\x68\x32\x61\x3a\x11\x7c\x98\x04\x7b\x94\x74\xe6\x80\xc2\xe0\xb2\xd0\x39\x1f\x92\xce\x9c\xcc\xd7\xf8\xb9\x46\x99\x5f\x86\x34\x46\x0f\xca\xd8\xda\x65\xd7\xa9\x9b\x95\xb3\x1e\x5c\x3e\x8e\x6e\xb5\xe8\xad\xdc\xa6\xbb\xd6\xf2\x0d\xd3\x2d\x8b\x59\x99\xc3\x41\x0a\x45\x69\xe3\xeb\x4a\x73\x69\x8b\x88\x5a\xa6\xa1\xdf\x77\x42\x55\x3f\x53\x65\xa5\x24\x4a\x6b\xd2\x6d\xe8\x3f\x4f\xfe\x28\x20\xd1\x4a\xd9\xe4\x27\x03\xfd\x63\x48\xc6\x46\x27\x42\x65\x4c\x24\x43\x2e\x69\x1b\x47\xfd\xaa\xe2\xe3\x32\xaf\x11\x67\x65\xbe\x1e\xde\xb1\x92\x05\x1f\xbd\x85\x90\x96\x8f\x39\xd7\xd0\xaf\x80\xc2\xcf\x90\xc7\x3e\x1d\x6f\x99\xf7\x4a\xcb\x3a\x09\xda\xec\x35\x1f\xef\x2b\x61\xf6\xa0\xe0\x8e\x3a\x37\x01\x46\x94\xc7\x99\xc7\xe6\xae\x15\x75\xbb\xf0\x33\xd0\x3b\x0a\x7f\x5b\xb6\x9a\xe4\x0c\x4b\x25\xe3\xba\xa4\xfe\xfc\xad\x4f\x25\x1b\x8a\x76\xa6\x17\xb7\x5e\x07\xc6\xa0\x9e\xf0\x0c\x5b\x68\x7c\x2e\xf8\x30\x31\x53\x63\xb1\xcc\xeb\x6f\x0d\x70\xa1\xf5\x7f\xaf\x1f\xb4\x32\x2b\x00\x3d\x34\x80\xa6\x01\xd8\xdc\x84\x57\x19\x8d\xc6\x32\x6d\x57\x85\x7e\x28\x04\xff\x44\x6d\xb8\x92\x6f\xc6\x20\x98\x86\x49\x10\xfb\x21\xd3\xb7\xb2\xee\x5a\x6f\x1a\x7f\xbd\x8a\xb1\xaa\x7a\xff\xb2\x39\x37\x3e\x22\x3f\x18\x51\x5d\x42\x5f\x17\x2b\xb5\x92\x68\x87\x75\x73\x13\xd6\x9f\x66\x56\xbf\x73\xa8\xa4\x65\x5c\xa2\xce\x3f\xc2\x5f\xf4\x1e\xae\xf0\x71\xd9\x47\xb3\x6d\x2d\x9f\x2c\x3d\xf3\xf7\x1c\xf2\x62\x51\x97\xf0\xe1\xa5\x2b\x36\x51\x34\x6a\xf7\x2d\x3b\xeb\xfb\x62\xe3\xd5\xc3\xe0\xde\x8d\xb3\xc5\x84\x58\x8c\x9a\x1b\x7c\xb6\x90\x2e\x2a\xe5\xf7\xc1\xad\xe4\xf6\x9e\x9c\xa0\xc9\x34\xaf\x2c\x57\x32\xad\x47\xd0\x61\x55\x09\x9e\x31\xc7\x72\x7d\x27\x44\x13\x4e\xe5\x88\x4b\x24\x27\x2a\x1b\x97\x28\xad\x3f\x4e\x1f\xac\xad\xcc\x41\xe2\x02\x60\xe2\x3a\xf3\x99\x2a\xc9\x61\x61\x51\xa7\x12\xed\x93\xd2\x8f\xb1\x65\x7a\x84\x96\x90\xc1\x75\x80\x79\x4f\x6e\xa6\x15\xa6\x52\x59\x5e\x4c\xc9\xe9\x33\x66\xd7\xae\x4e\xd2\xb5\x69\xc8\xbd\xc0\x15\x0a\xc5\xf2\xd4\xf3\x1f\xb9\x10\xd0\x37\xf0\x8f\xdb\x4b\xd8\xf8\x7a\x78\x76\x71\x79\x76\x42\xce\x79\xc9\xed\xc5\xb7\x5f\xcf\xce\x4f\x53\x2e\x0b\x2e\xb9\x9d\xd6\xcc\xcb\xab\x6f\xc7\x2b\xbc\xe3\x6f\x57\x4b\x62\x37\xbc\x44\x35\xb6\x1e\xc4\x35\x66\xe9\x16\x39\x41\x81\x23\x66\x31\x9d\xa2\x21\xbf\x71\x21\xbe\xaa\x1c\xd3\x4a\xab\x0c\x8d\x21\x64\x70\x16\x0a\xe7\x9e\xfc\x8b\x49\x8b\xf9\xd1\x34\x2d\xc7\xc2\xf2\xfe\xd8\xb8\x19\x19\xae\xfb\x7b\xf7\x65\xca\x86\x84\x44\xcb\x99\x70\x25\xd9\x4a\xe3\x72\x27\xfd\x73\x59\x9c\x11\x80\x3b\xaa\x71\xc4\x8d\xd5\xd3\x7e\xc9\xb5\x56\xda\xdc\xd1\x03\x18\x10\x70\x7f\x77\xd4\xe5\xe8\x20\x49\x76\xbe\xec\xb0\xdd\x5f\xf6\x3f\xc7\x65\x9c\x33\x95\x09\x35\xce\x63\xae\xee\x28\x01\xb8\xef\x11\x80\xd9\x8c\x17\x20\x50\x42\x7c\xf2\xed\xf8\xb7\xd3\xab\xef\x57\xa7\x7f\x3f\xbb\xbe\xb9\xfa\xf7\x7c\xee\x7d\x70\x69\x30\x1b\x6b\xec\xd7\xce\x38\x3a\x37\xc1\x09\x00\x0c\x66\x33\xcd\xe4\x08\x61\x83\xf7\x36\x26\x70\x90\xb6\xcd\x78\x0f\xf8\x5f\xd8\xe0\x00\x5b\xf3\xf9\x1d\x9d\xcd\x36\x26\xe1\xeb\x56\x80\xf9\xbc\xd7\x60\xc9\xdc\xa9\xf8\x4f\x0d\xd0\xff\xef\xc1\x8c\x34\xab\x1e\xee\xe8\x81\x13\x5c\x38\x3a\x3f\x3b\x72\x9a\x64\xee\x02\x6f\xcb\x4a\xf4\x00\xb5\x76\x7d\x6c\x11\xbb\xf8\x02\x9f\x22\xbf\x7f\xd1\x6e\x7c\xc9\xb4\x59\x4d\x89\xab\x52\xa7\xf3\x21\x05\xc9\x85\x2f\xd1\xb0\xb7\xc5\xa7\x2e\xae\x4e\x37\x88\x43\xe5\xb4\xa1\x60\x5c\x60\x7e\x40\xbd\x27\x57\xb4\x15\x93\x3c\x8b\xb6\x7d\x9d\xfa\xb4\xa1\x9c\x7c\x65\x15\xa4\x50\xb2\x47\x8c\x4a\x56\x0d\x42\xe6\xee\xf9\x62\xe9\x9a\xcd\xbb\xa4\x13\xc4\x06\x74\x25\x66\xf4\x1e\x52\xb8\xaa\x93\x7b\xa8\x75\x4b\xf0\xfc\xec\xc8\xcb\xbc\xb4\x0d\xe7\x73\x38\x2e\x0a\xd4\xe0\x57\xda\xf8\xc8\x13\xa4\xf3\x1d\x52\x70\x41\x89\x5d\x35\x8d\x2d\x46\x9b\x41\xac\x57\x43\x7c\x7d\xac\x81\x1f\x1f\x39\xf5\x68\xfd\xe4\xb8\x74\xcb\x50\xe4\x47\xc5\x58\x8b\x4b\x8d\x05\x7f\xf6\x03\xe3\xb5\x1f\x3c\x49\x57\xb0\x4b\x3d\x21\x11\xdc\xef\xcb\xae\x73\x64\xee\x33\x14\x98\x3c\xef\xed\x7e\xdf\xfd\x5c\x57\x7a\xff\x27\x13\xf6\xcb\x4e\x92\xd4\xf3\xcc\x38\xab\x83\xfb\x10\xb3\x99\x3b\xe8\xd0\xed\x2f\xf1\xd6\x4e\xbc\xd5\xcf\x90\xf6\x96\x39\xdb\x2d\xce\xa7\x15\xce\x6e\x4b\x6b\xb7\xa5\xb5\xdb\xd2\xda\x6f\x69\xed\xaf\x6a\x6d\x7f\x5a\x95\xd9\xfe\xd4\x94\xd9\x6b\x61\xde\x6b\x61\xde\x6b\x21\xdc\x6b\x21\xdc\x6b\x21\xf4\x9c\x9d\x15\xce\x7e\xbc\xd5\x24\xb7\x9b\xe4\xa7\x26\xb9\xd3\x24\x3f\x37\xc9\x5f\x9a\xe4\x6e\x93\xfc\xd2\x24\xf7\x5e\xc8\x7d\x7f\xe5\x40\xce\x49\x27\x67\x96\xf5\x42\x41\x1e\x1a\x83\x36\xa2\xf5\xf6\x91\xd4\xbf\xc7\x16\xbb\x98\xdf\x12\x5f\x6a\xf1\x43\xba\xb6\x12\x43\xbd\xd5\x45\xf6\xf2\x58\x16\x2f\x25\x3c\x77\x67\x28\xbe\x95\x25\xd3\xe6\x81\x89\xc8\x03\x80\xcd\x85\x70\x97\x74\x0a\xa5\xe1\x7b\x0f\x5c\xb7\x82\xd0\xbc\x5e\x2c\x39\x87\x7e\xe5\x17\x32\x5a\xde\xff\x5f\x9e\x7b\x0f\x26\xdd\x7a\x1c\xff\x2f\x00\x00\xff\xff\xcf\x13\x2b\x6b\x58\x0e\x00\x00")

func installCommandDockerGoBytes() ([]byte, error) {
	return bindataRead(
		_installCommandDockerGo,
		"install/command/docker.go",
	)
}

func installCommandDockerGo() (*asset, error) {
	bytes, err := installCommandDockerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/docker.go", size: 3672, mode: os.FileMode(420), modTime: time.Unix(1569418814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installCommandDockerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcf\x31\x0a\xc3\x30\x0c\x85\xe1\xdd\xa7\x30\x9e\x5b\x63\xc9\xad\x2c\x9d\xa5\x74\x0a\xb9\xff\x15\x02\x26\x90\xa7\x37\x7e\xe8\x0d\xbf\x7e\xa5\xd6\x26\xab\x8f\xd9\xc7\xfb\x38\xdb\xeb\xb1\x90\x35\xd9\x68\x6f\xb4\x37\xda\x07\xed\x23\xef\x45\xf3\x5d\x14\xef\x4e\x7d\x4e\x7d\x4e\x3d\x4e\x3d\x4e\x3d\xdb\x33\x39\xfa\x40\x08\x42\x11\x13\xf1\x41\x7c\x11\x86\x58\x08\xbf\x11\xfb\xa9\x56\xfe\xe5\x0a\x00\x00\xff\xff\xc9\x0f\x85\xc6\x85\x01\x00\x00")

func installCommandDockerJsonBytes() ([]byte, error) {
	return bindataRead(
		_installCommandDockerJson,
		"install/command/docker.json",
	)
}

func installCommandDockerJson() (*asset, error) {
	bytes, err := installCommandDockerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install/command/docker.json", size: 389, mode: os.FileMode(420), modTime: time.Unix(1569418365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"install/command/assert.go":       installCommandAssertGo,
	"install/command/command.go":      installCommandCommandGo,
	"install/command/containerd.go":   installCommandContainerdGo,
	"install/command/containerd.json": installCommandContainerdJson,
	"install/command/docker.go":       installCommandDockerGo,
	"install/command/docker.json":     installCommandDockerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"install": &bintree{nil, map[string]*bintree{
		"command": &bintree{nil, map[string]*bintree{
			"assert.go":       &bintree{installCommandAssertGo, map[string]*bintree{}},
			"command.go":      &bintree{installCommandCommandGo, map[string]*bintree{}},
			"containerd.go":   &bintree{installCommandContainerdGo, map[string]*bintree{}},
			"containerd.json": &bintree{installCommandContainerdJson, map[string]*bintree{}},
			"docker.go":       &bintree{installCommandDockerGo, map[string]*bintree{}},
			"docker.json":     &bintree{installCommandDockerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
